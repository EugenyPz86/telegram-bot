import os
import asyncio
import logging
from flask import Flask, request, jsonify
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)

# –õ–æ–≥–∏
logging.basicConfig(level=logging.INFO)

# Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω!")

# –°–æ–∑–¥–∞—ë–º Telegram-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
application = ApplicationBuilder().token(TOKEN).build()

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –∑–∞–ø—É—â–µ–Ω –Ω–∞ Render —á–µ—Ä–µ–∑ Webhook üéâ")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
async def echo_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Telegram: {update}")
    if update.message:
        await update.message.reply_text("–Ø –ø–æ–ª—É—á–∏–ª —Ç–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ!")

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.ALL, echo_all))

# –†–æ—É—Ç "/" ‚Äî Render –µ–≥–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç
@app.route("/", methods=["GET"])
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç ‚úÖ", 200

# Webhook ‚Äî Telegram —Å—é–¥–∞ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
@app.route("/webhook", methods=["POST"])
def webhook():
    try:
        data = request.get_json(force=True)
        logging.info("=== –ü–û–õ–£–ß–ï–ù–û –û–ë–ù–û–í–õ–ï–ù–ò–ï –û–¢ TELEGRAM ===")
        logging.info(data)
        update = Update.de_json(data, application.bot)
        asyncio.create_task(application.process_update(update))
        return "ok", 200
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ Webhook")
        return jsonify({"error": str(e)}), 500

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def run_telegram():
    await application.initialize()
    await application.start()

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(run_telegram())
    app.run(host="0.0.0.0", port=10000)